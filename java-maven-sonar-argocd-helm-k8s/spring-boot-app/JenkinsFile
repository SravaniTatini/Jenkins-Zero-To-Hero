pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = "sravani2310/myapp:${BUILD_NUMBER}"
    }

    tools {
        maven 'maven3'
    }

    stages {

        stage('Checkout') {
            steps {
                echo 'Checking out code from GitHub Repository'
                git branch: 'main', url: 'https://github.com/SravaniTatini/Jenkins-Zero-To-Hero.git'
            }
        }

        stage('Build Artifact') {
            steps {
                echo 'Building the artifact'
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
                
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'Running SonarQube Code Analysis'
                sh '''
                    cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean verify sonar:sonar \
                        -Dsonar.host.url=http://54.173.43.222:9000/ \
                        -Dsonar.token=squ_1cb36082f748a3b93af4a37cfc843266347985be
                '''
            }
        }

        stage('Build Docker Image') {
          environment {
        DOCKER_IMAGE = "sravani2310/myapp:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
      }
            steps {
                echo 'Building Docker Image'
                sh '''
                    docker build -t ${DOCKER_IMAGE} \
            -f java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile \
            java-maven-sonar-argocd-helm-k8s/spring-boot-app/
                '''
            }
        }

           stage('Scan Docker Image using Trivy') {
    steps {
        echo 'Scanning Docker Image using Dockerized Trivy'
        sh """
            # Pull latest Trivy Docker image
            docker pull aquasec/trivy:latest

            # Scan the Docker image inside the container
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                aquasec/trivy:latest image ${DOCKER_IMAGE}
        """
    }
}


        stage('Push Docker Image to DockerHub') {
    steps {
        script {
            withCredentials([usernamePassword(credentialsId: 'dockerhub', 
                                              usernameVariable: 'DOCKERHUB_USER', 
                                              passwordVariable: 'DOCKERHUB_PASS')]) {
                sh 'echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin'
            }
        }
        echo 'Pushing Docker Image to DockerHub'
        sh 'docker push ${DOCKER_IMAGE}'
        echo 'Docker Image pushed successfully'
    }
}

        stage('Update Deployment Files') {
            environment { 
                GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
                GIT_USER_NAME = "SravaniTatini"
            }

            steps {
                echo 'Updating Deployment File in GitHub'
                
                withCredentials([string(credentialsId: 'github', variable: 'github')]) {
                    sh '''
                        # Configure git user
                        git config user.email "sravanitatini2310@gmail.com"
                        git config user.name "Sravani Tatini"
                        
                        # Update image tag in deployment YAML
                        sed -i "s|myapp:.*|myapp:${BUILD_NUMBER}|g" java-maven-sonar-argocd-helm-k8s/spring-boot-app/deploymentfiles/deployment.yaml 

                        # Commit and push changes
                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app/deploymentfiles/deployment.yaml 
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${github}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
                    '''
                }
            }
        }
    }
}
